pipeline {
    agent any
	parameters {
        choice choices: ['LoadTest', 'StressTest', 'EnduranceTest', 'BaselineTest', 'LoadTest_MainFlows', 'ScriptVerification_SmokeTest'], description: 'Type of Test To Be Executed', name: 'Type_of_API_test'
        string defaultValue: '1', description: 'Number of virtual users', name: 'VU1'
        string defaultValue: '60', description: 'Duration(seconds)', name: 'DURATION'
	//string defaultValue: '1', description: 'Iterations', name: 'ITERATIONS'
	choice(choices: ['test5.js', 'test4.js'], description: 'Select a test', name: 'scenario')
		}
		
       stages {
        stage('Verify k6') {
            steps {
                bat 'k6 version'
            }
        }
	     stage('Run k6 test') {
            steps {
                 // Run k6 and generate JSON output
                 //   bat 'k6 run --vus %VU1% --duration %DURATION%s --out influxdb=http://localhost:8086/mydb K6_scenarios\\.idea\\%scenario%'
		bat 'k6 run --vus %VU1% --duration %DURATION%s K6_scenarios\\.idea\\%scenario%'
                //    bat 'k6 run --vus %VU1% --duration %DURATION%s K6_scenarios\\.idea\\test4.js'
                    // Generate HTML report from JSON
                //   bat 'k6 report -o summaryy.html summaryy.json'
            }
        }
	stage('Capture Grafana Screenshot') {
    steps {
        script {
            def grafanaUrl = 'http://172.23.176.156:3000/d/hb7fSE0Zz/testlab-opencart-monitoring?orgId=1&var-job=perf_opencart_1&var-hostname=All&var-node=All&var-maxmount=%2F&var-env=&var-name=&from=now-30m&to=now'

            // Use the configured .NET SDK tool
            def dotnet = tool 'dotnet'

            // Download Puppeteer-Sharp DLL
            bat "${dotnet} add package PuppeteerSharp --version 2.0.4 --package-directory .\\packages"

            writeFile file: 'capture.cs', text: """
                using PuppeteerSharp;

                class Program
                {
                    static async Task Main()
                    {
                        var browser = await Puppeteer.LaunchAsync();
                        var page = await browser.NewPageAsync();
                        await page.GoToAsync('${grafanaUrl}');
                        await page.ScreenshotAsync('grafana_screenshot.png');
                        await browser.CloseAsync();
                    }
                }
            """

            // Compile and run the capture script
            bat "${dotnet} build"
            bat "${dotnet} run"
        }
    }
}
		stage('Publish HTML Report') {
            steps {
                script {
                // reportName variable
                def reportName = params.Type_of_API_test
                // Thread variable
                def VU1 = params.VU1
                // Get the current timestamp in milliseconds
                def timestamp = currentBuild.getTimeInMillis()
                // Format the timestamp into a human-readable date
                def formattedTimestamp = new Date(timestamp).format('yyyy-MM-dd HH:mm:ss')
                 // Publish the HTML report
                publishHTML(target: [
                    allowMissing: true,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: '.',
                    reportFiles: 'summary.html', // Specify the main HTML file to display
                    reportName: "${formattedTimestamp} ${reportName} HTML Report with ${VU1} users"
                ])
		// Archive the Grafana screenshot as a Jenkins artifact
                    archiveArtifacts artifacts: 'grafana_screenshot.png', onlyIfSuccessful: false
            }
            }
        }
    }
}
